#!/bin/bash

DOCKER_ENCAPS_IMG=${DOCKER_ENCAPS_IMG:-"alpine:latest"}
DOCKER_ENCAPS_IMG_MIRROR=${DOCKER_ENCAPS_IMG_MIRROR}
DOCKER_ENCAPS_IMG_MIRROR_UPDATE=${DOCKER_ENCAPS_IMG_MIRROR_UPDATE:-false}
DOCKER_ENCAPS_SHELL=${DOCKER_ENCAPS_SHELL:-"/bin/sh"}
DOCKER_ENCAPS_ACTUAL_SHELL=${DOCKER_ENCAPS_ACTUAL_SHELL:-"/bin/sh"}
DOCKER_ENCAPS_NET=${DOCKER_ENCAPS_NET:-'--net=host'}
DOCKER_ENCAPS_ETC_PATH=${DOCKER_ENCAPS_ETC_PATH:-'/etc/encaps.d'}
DOCKER_ENCAPS_UID=${DOCKER_ENCAPS_UID:-$(id -u)}
DOCKER_ENCAPS_GID=${DOCKER_ENCAPS_GID:-$(id -g)}
DOCKER_ENCAPS_ENTRYPOINT=${DOCKER_ENCAPS_ENTRYPOINT:-'tail'}
DOCKER_ENCAPS_SLEEP_CMD=${DOCKER_ENCAPS_SLEEP_CMD:-'-f /dev/null'}
DOCKER_ENCAPS_WEIGHT=${DOCKER_ENCAPS_WEIGHT:-1}

# Name of the encaps container
if [ -z "$DOCKER_ENCAPS_NAME" ]; then
    if [ -z "$BUILD_TAG" ]; then
        echo "No DOCKER_ENCAPS_NAME or BUILD_TAG"
        exit 1
    fi

    DOCKER_ENCAPS_NAME=$(echo "$BUILD_TAG" | sed 's/[^a-zA-Z0-9_.-]/_/g')
fi

# Spawn container
if ! docker inspect --type=container "$DOCKER_ENCAPS_NAME" > /dev/null 2>&1; then

    # (Relative) weight of the container (compared to other containers)
    # cf:
    # - https://docs.docker.com/engine/reference/run/#cpu-share-constraint
    # - http://stackoverflow.com/questions/26841846/how-to-allocate-50-cpu-resource-to-docker-container
    if [[ "$DOCKER_ENCAPS_WEIGHT" != "0" ]]; then
        DOCKER_ENCAPS_CPU_SHARES=${DOCKER_ENCAPS_CPU_SHARES:-$((1024*DOCKER_ENCAPS_WEIGHT))}
    fi

    CPU_SHARED_OPT=""
    if [ -n "$DOCKER_ENCAPS_CPU_SHARES" ]; then
        CPU_SHARES_OPT="--cpu-shares=${DOCKER_ENCAPS_CPU_SHARES}"
    fi

    # Run init hooks
    for hook in $(find "$DOCKER_ENCAPS_ETC_PATH" -name "init*" 2>/dev/null); do
        $hook
    done

    # Pull image unless a specific ID has been provided
    if [[ "$DOCKER_ENCAPS_IMG" != "sha256:"* ]]; then
        # If a mirror image is provided, try to pull from it first
        IMG_MIRROR_PULL_RET=1
        if [ -n "$DOCKER_ENCAPS_IMG_MIRROR" ]; then
            docker pull "$DOCKER_ENCAPS_IMG_MIRROR"
            IMG_MIRROR_PULL_RET=$?
        fi

        # If the pull fails and a pull from a mirror has been successful,
        # use that image instead as a fallback
        if ! docker pull "$DOCKER_ENCAPS_IMG"; then
            if [ $IMG_MIRROR_PULL_RET -eq 0 ]; then
                DOCKER_ENCAPS_IMG="$DOCKER_ENCAPS_IMG_MIRROR"
            fi
        fi

        if [ -n "$DOCKER_ENCAPS_IMG_MIRROR" ] && [ "$DOCKER_ENCAPS_IMG_MIRROR_UPDATE" = "true" ]; then
            if [ "$(docker images -q "$DOCKER_ENCAPS_IMG" | head -1)" != "$(docker images -q "$DOCKER_ENCAPS_IMG_MIRROR" | head -1)" ]; then
                echo "encaps: Updating mirror $DOCKER_ENCAPS_IMG_MIRROR"
                docker tag "$DOCKER_ENCAPS_IMG" "$DOCKER_ENCAPS_IMG_MIRROR"
                docker push "$DOCKER_ENCAPS_IMG_MIRROR"
            fi
        fi
    fi

    set -x
    bash -c "docker run \
             --detach \
             --name "$DOCKER_ENCAPS_NAME" \
             --user "$DOCKER_ENCAPS_UID:$DOCKER_ENCAPS_GID" \
             --tmpfs "/run/user/$DOCKER_ENCAPS_UID" \
             --volume "$PWD:$PWD" \
             --workdir "$PWD" \
             --init \
             --entrypoint $DOCKER_ENCAPS_ENTRYPOINT \
             $DOCKER_ENCAPS_NET \
             $CPU_SHARES_OPT \
             $DOCKER_ENCAPS_ARGS \
             $DOCKER_ENCAPS_IMG \
             $DOCKER_ENCAPS_SLEEP_CMD > /dev/null"
    RUN_RET=$?
    set +x

    if [ $RUN_RET -eq 0 ]; then
        STATE="$(docker inspect --type=container --format "{{.State.Status}}" "$DOCKER_ENCAPS_NAME")"
        if [[ "$STATE" != "running" ]]; then
            echo "encaps: container is not running"
            RUN_RET=1
        fi
    fi

    if [ $RUN_RET -ne 0 ]; then
        echo "encaps: Unable to launch container from $DOCKER_ENCAPS_IMG"
        echo "Logs: ---------------------------------------"
        docker logs "$DOCKER_ENCAPS_NAME"
        echo "---------------------------------------------"
        exit 1
    fi
fi

TMP_FILE="/tmp/script-$(sha1sum "$1" | awk '{print $1}')"

# Copy file in container
docker exec -i "$DOCKER_ENCAPS_NAME" "$DOCKER_ENCAPS_ACTUAL_SHELL" -c "cat > $TMP_FILE" < $1

# Exec file
docker exec \
    --interactive \
    $DOCKER_ENCAPS_EXEC_ARGS \
    "$DOCKER_ENCAPS_NAME" \
    "$DOCKER_ENCAPS_SHELL" "$TMP_FILE"
RET=$?

echo "Exit $RET"
exit $RET

